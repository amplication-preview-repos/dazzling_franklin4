/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MenuService } from "../menu.service";
import { MenuCreateInput } from "./MenuCreateInput";
import { Menu } from "./Menu";
import { MenuFindManyArgs } from "./MenuFindManyArgs";
import { MenuWhereUniqueInput } from "./MenuWhereUniqueInput";
import { MenuUpdateInput } from "./MenuUpdateInput";
import { MenuItemFindManyArgs } from "../../menuItem/base/MenuItemFindManyArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuItemWhereUniqueInput } from "../../menuItem/base/MenuItemWhereUniqueInput";

export class MenuControllerBase {
  constructor(protected readonly service: MenuService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Menu })
  async createMenu(@common.Body() data: MenuCreateInput): Promise<Menu> {
    return await this.service.createMenu({
      data: {
        ...data,

        restaurant: data.restaurant
          ? {
              connect: data.restaurant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Menu] })
  @ApiNestedQuery(MenuFindManyArgs)
  async menus(@common.Req() request: Request): Promise<Menu[]> {
    const args = plainToClass(MenuFindManyArgs, request.query);
    return this.service.menus({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Menu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async menu(
    @common.Param() params: MenuWhereUniqueInput
  ): Promise<Menu | null> {
    const result = await this.service.menu({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Menu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMenu(
    @common.Param() params: MenuWhereUniqueInput,
    @common.Body() data: MenuUpdateInput
  ): Promise<Menu | null> {
    try {
      return await this.service.updateMenu({
        where: params,
        data: {
          ...data,

          restaurant: data.restaurant
            ? {
                connect: data.restaurant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Menu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMenu(
    @common.Param() params: MenuWhereUniqueInput
  ): Promise<Menu | null> {
    try {
      return await this.service.deleteMenu({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/menuItems")
  @ApiNestedQuery(MenuItemFindManyArgs)
  async findMenuItems(
    @common.Req() request: Request,
    @common.Param() params: MenuWhereUniqueInput
  ): Promise<MenuItem[]> {
    const query = plainToClass(MenuItemFindManyArgs, request.query);
    const results = await this.service.findMenuItems(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        menu: {
          select: {
            id: true,
          },
        },

        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItems")
  async connectMenuItems(
    @common.Param() params: MenuWhereUniqueInput,
    @common.Body() body: MenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItems: {
        connect: body,
      },
    };
    await this.service.updateMenu({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItems")
  async updateMenuItems(
    @common.Param() params: MenuWhereUniqueInput,
    @common.Body() body: MenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItems: {
        set: body,
      },
    };
    await this.service.updateMenu({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItems")
  async disconnectMenuItems(
    @common.Param() params: MenuWhereUniqueInput,
    @common.Body() body: MenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItems: {
        disconnect: body,
      },
    };
    await this.service.updateMenu({
      where: params,
      data,
      select: { id: true },
    });
  }
}
